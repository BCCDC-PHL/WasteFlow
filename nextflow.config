manifest {
  name = 'WasteFlow'
  author = 'Jessica M Caleta'
  homePage = 'https://github.com/j3551ca/WasteFlow'
  description = 'Pathogen surveillance in Nextflow'
  mainScript = 'main.nf'
  version = '0.2.2'
}

//paramater-defining functions:
def robust_path(dir) {
  if (dir.toString() =~ /[^\/]$/) {
    data_dir = dir.toString() + '/'
  }
  else {
    data_dir = dir.toString()
  }
    return data_dir
}

def robust_fq(illumina_suffix, fastq_suffix) {
  def pe_reads = []
  for (pair in illumina_suffix) {
    for (ext in fastq_suffix) {
      pe_reads.add(params.data_dir.toString() + '*' + \
      pair.toString() + ext.toString())
    }
  }
  return pe_reads
}

//if (params.refine){
//  def refined = '--lineages'
//}

//pipeline parameters
params {

//help message
help = null

//version number
version = null

//conda env local cache
conda_cache = null

//User-defined directory containing sequences to be analyzed
dir="/mandatory/path/to/data"

//absolute path to data with trailing /
data_dir = robust_path(params.dir)

//WasteFlow results directory to output 
out_dir="${params.data_dir}results"

//reference for alignment
ref = "${projectDir}/resources/cov2_ref.fasta"

//input sequences
illumina_suffix = ['*_R{1,2}_001', '*_R{1,2}', '*_{1,2}']
fastq_suffix = ['.fastq.gz', '.fq.gz', '.fastq', '.fq']
pe_reads = robust_fq(params.illumina_suffix, params.fastq_suffix)
//pe_reads = "${params.data_dir}*_{R1,R2}_*.fastq.gz"

//switch for processing reads with trim galore instead of fastp
trim_galore = false

//switch for aligning reads with bwa-mem instead of minimap2
bwa = false

//additional adapters to include during trimming with fastp
adapters = "${projectDir}/resources/cov2_adapter.fasta"

//primer trimming with iVar
primers = "${projectDir}/resources/articV5.3.bed"

//additional options for iVar trim
ivar_flags = '-m 30 -q 20 -s 4'

//call variants using Freebayes instead of iVar (used as part of Freyja) default
freebayes = false

//gff v3 file of pathogen for vcf annotation with bcftools
gff3 = "${projectDir}/resources/MN908947.3.gff3"

//summarize rel abundance results of individual samples from Freyja with plot
summarize = false

//resolve freyja summary down to lineages
//refine = false
//refined=''
freyja_plot = '--lineages'
}

//seamlessly run pipeline on different execution systems by modifying
//the process section of the config file. ex. AWS, SLURM, sun grid engine:

process {
withName: align_minimap2 {
    cpus = 28
  }
withName: primer_trim {
conda = "${projectDir}/envs/freyja_env.yml"
}
withName: var_call_freebayes {
conda = "${projectDir}/envs/bcf_free_env.yml"
}
withName: annotate_bcf {
conda = "${projectDir}/envs/bcf_free_env.yml"
}
withName: annotate_snpeff {
conda = "${projectDir}/envs/snpeff_env.yml"
//"/home/jess.cal/.conda/envs/snpeff_env"
}
withName: var_call_freyja {
conda = "${projectDir}/envs/freyja_env.yml"
}
withName: lineage_freyja {
conda = "${projectDir}/envs/freyja_env.yml"
}
withName: summarize_freyja {
conda = "${projectDir}/envs/freyja_env.yml"
}

  //  executor = 'sge'
  //  queue = 'all.q'
  //  clusterOptions = '-S /bin/bash'
  //  penv = 'smp'
}


profiles {
    conda {   
      process.conda = "${projectDir}/envs/wf_env.yml"
      conda.useMamba = false
      enabled = true
      conda.createTimeout = '1 h'
      if (params.conda_cache) {
         conda.cacheDir = params.conda_cache
       }
     }

    //can add docker here
  }

//html displaying breakdown of time taken to execute workflow
timeline {
  enabled = true
  file = "${params.out_dir}/pipeline_reports/WasteFlow_timeline.html"
}

//html of cpu/mem usage
report {
  enabled = true
  file = "${params.out_dir}/pipeline_reports/WasteFlow_usage.html"
}

//dag of WF workflow
dag {
    enabled = true
    file = "${params.out_dir}/pipeline_reports/WasteFlow_dag.html"
}

